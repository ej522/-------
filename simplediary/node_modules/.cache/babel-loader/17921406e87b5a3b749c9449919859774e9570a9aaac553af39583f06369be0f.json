{"ast":null,"code":"var _jsxFileName = \"/Users/eunji/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u11B8\\u110F\\u1173\\u1100\\u1175\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/simplediary/src/App.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport LifeCycle from \"./LifeCycle\";\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"이정환\",\n//     content: \"하이 1\",\n//     emotion: 5,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"홍길동\",\n//     content: \"하이 2\",\n//     emotion: 3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"아무개\",\n//     content: \"하이 3\",\n//     emotion: 1,\n//     created_date: new Date().getTime(),\n//   },\n// ];\n\n//https://jsonplaceholder.typicode.com/comments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //전역적으로 data를 관리할 state\n  const [data, setData] = useState([]);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\");\n    console.log(res);\n  };\n\n  //일기 데이터를 추가할 수 있는 함수\n  //data를 업데이트 시키는 로직인 setData를 작성\n  //다이어리 에디터 안에 있는 값들을 모르기 때문에 파라미터로 받아옴\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]); //newItem을 제일 먼저 보여줄 거라서 newItem먼저\n  };\n  const onRemove = targetId => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter(it => it.id !== targetId);\n    setData(newDiaryList);\n  };\n  const onEidt = (targetId, newContent) => {\n    setData(data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(LifeCycle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEidt: onEidt,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PSh4R9M9XXzghkCT8iIKMDh9kfM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useRef","useState","DiaryEditor","DiaryList","LifeCycle","jsxDEV","_jsxDEV","App","_s","data","setData","dataId","getData","res","fetch","console","log","onCreate","author","content","emotion","created_date","Date","getTime","newItem","id","current","onRemove","targetId","newDiaryList","filter","it","onEidt","newContent","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryList","_c","$RefreshReg$"],"sources":["/Users/eunji/한입크기리액트/simplediary/src/App.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\nimport LifeCycle from \"./LifeCycle\";\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"이정환\",\n//     content: \"하이 1\",\n//     emotion: 5,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"홍길동\",\n//     content: \"하이 2\",\n//     emotion: 3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"아무개\",\n//     content: \"하이 3\",\n//     emotion: 1,\n//     created_date: new Date().getTime(),\n//   },\n// ];\n\n//https://jsonplaceholder.typicode.com/comments\n\nfunction App() {\n  //전역적으로 data를 관리할 state\n  const [data, setData] = useState([]);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\");\n    console.log(res);\n  };\n\n  //일기 데이터를 추가할 수 있는 함수\n  //data를 업데이트 시키는 로직인 setData를 작성\n  //다이어리 에디터 안에 있는 값들을 모르기 때문에 파라미터로 받아옴\n  const onCreate = (author, content, emotion) => {\n    const created_date = new Date().getTime();\n\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    dataId.current += 1;\n    setData([newItem, ...data]); //newItem을 제일 먼저 보여줄 거라서 newItem먼저\n  };\n\n  const onRemove = (targetId) => {\n    console.log(`${targetId}가 삭제되었습니다.`);\n    const newDiaryList = data.filter((it) => it.id !== targetId);\n    setData(newDiaryList);\n  };\n\n  const onEidt = (targetId, newContent) => {\n    setData(\n      data.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <LifeCycle />\n      <DiaryEditor onCreate={onCreate} />\n      <DiaryList onEidt={onEidt} onRemove={onRemove} diaryList={data} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,MAAM,GAAGX,MAAM,CAAC,CAAC,CAAC;EAExB,MAAMY,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+CAA+C,CAAC;IACxEC,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;EAClB,CAAC;;EAED;EACA;EACA;EACA,MAAMI,QAAQ,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,KAAK;IAC7C,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IAEzC,MAAMC,OAAO,GAAG;MACdN,MAAM;MACNC,OAAO;MACPC,OAAO;MACPC,YAAY;MACZI,EAAE,EAAEd,MAAM,CAACe;IACb,CAAC;IACDf,MAAM,CAACe,OAAO,IAAI,CAAC;IACnBhB,OAAO,CAAC,CAACc,OAAO,EAAE,GAAGf,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMkB,QAAQ,GAAIC,QAAQ,IAAK;IAC7Bb,OAAO,CAACC,GAAG,CAAE,GAAEY,QAAS,YAAW,CAAC;IACpC,MAAMC,YAAY,GAAGpB,IAAI,CAACqB,MAAM,CAAEC,EAAE,IAAKA,EAAE,CAACN,EAAE,KAAKG,QAAQ,CAAC;IAC5DlB,OAAO,CAACmB,YAAY,CAAC;EACvB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAACJ,QAAQ,EAAEK,UAAU,KAAK;IACvCvB,OAAO,CACLD,IAAI,CAACyB,GAAG,CAAEH,EAAE,IACVA,EAAE,CAACN,EAAE,KAAKG,QAAQ,GAAG;MAAE,GAAGG,EAAE;MAAEZ,OAAO,EAAEc;IAAW,CAAC,GAAGF,EACxD,CACF,CAAC;EACH,CAAC;EAED,oBACEzB,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB9B,OAAA,CAACF,SAAS;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACblC,OAAA,CAACJ,WAAW;MAACe,QAAQ,EAAEA;IAAS;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnClC,OAAA,CAACH,SAAS;MAAC6B,MAAM,EAAEA,MAAO;MAACL,QAAQ,EAAEA,QAAS;MAACc,SAAS,EAAEhC;IAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEV;AAAChC,EAAA,CAjDQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}