{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n\n// //자식컴포넌트1\n// const CounterA = React.memo(({ count }) => {\n//   useEffect(() => {\n//     console.log(`CounterA update - count : ${count}`);\n//   });\n//   return <div>{count}</div>;\n// });\n\n// //자식컴포넌트2\n// const CounterB = ({ obj }) => {\n//   useEffect(() => {\n//     console.log(`CounterB update - count : ${obj.count}`);\n//   });\n//   return <div>{obj.count}</div>;\n// };\n\n// const areEqual = (prevProps, nextProps) => {\n// //   if (prevProps.obj.count === nextProps.obj.count) {\n// //     return true; //이전 props와 현재 props가 같다 -> 리렌더링을 일으키지 않음\n// //   }\n\n// //   return false; //이전과 현재가 다른다 -> 리렌더링 일으킴\n//     return prevProps.obj.count === nextProps.obj.count;\n// };\n\n// const MemoizedCounterB = React.memo(CounterB, areEqual); //areEqual는 리액트 메모의 비교함수로서 작용하게 됨 => CounterB는 areEqual함수의 판단에 따라 리렌더링 할지 말지를 결정하게 되는 메모화된 컴포넌트가 됨\n\n// const OptimizeTest = () => {\n//   const [count, setCount] = useState(1);\n//   const [obj, setObj] = useState({\n//     count: 1,\n//   });\n//   return (\n//     <div style={{ padding: 50 }}>\n//       <div>\n//         <h2>Counter A</h2>\n//         <CounterA count={count} />\n//         <button onClick={() => setCount(count)}>A button</button>\n//       </div>\n//       <div>\n//         <h2>Counter B</h2>\n//         <MemoizedCounterB obj={obj} />\n//         <button onClick={() => setObj({ count: obj.count })}>B button</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OptimizeTest;","map":{"version":3,"names":[],"sources":["/Users/eunji/한입크기리액트/simplediary/src/OptimizeTest2.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// //자식컴포넌트1\n// const CounterA = React.memo(({ count }) => {\n//   useEffect(() => {\n//     console.log(`CounterA update - count : ${count}`);\n//   });\n//   return <div>{count}</div>;\n// });\n\n// //자식컴포넌트2\n// const CounterB = ({ obj }) => {\n//   useEffect(() => {\n//     console.log(`CounterB update - count : ${obj.count}`);\n//   });\n//   return <div>{obj.count}</div>;\n// };\n\n// const areEqual = (prevProps, nextProps) => {\n// //   if (prevProps.obj.count === nextProps.obj.count) {\n// //     return true; //이전 props와 현재 props가 같다 -> 리렌더링을 일으키지 않음\n// //   }\n\n// //   return false; //이전과 현재가 다른다 -> 리렌더링 일으킴\n//     return prevProps.obj.count === nextProps.obj.count;\n// };\n\n// const MemoizedCounterB = React.memo(CounterB, areEqual); //areEqual는 리액트 메모의 비교함수로서 작용하게 됨 => CounterB는 areEqual함수의 판단에 따라 리렌더링 할지 말지를 결정하게 되는 메모화된 컴포넌트가 됨\n\n// const OptimizeTest = () => {\n//   const [count, setCount] = useState(1);\n//   const [obj, setObj] = useState({\n//     count: 1,\n//   });\n//   return (\n//     <div style={{ padding: 50 }}>\n//       <div>\n//         <h2>Counter A</h2>\n//         <CounterA count={count} />\n//         <button onClick={() => setCount(count)}>A button</button>\n//       </div>\n//       <div>\n//         <h2>Counter B</h2>\n//         <MemoizedCounterB obj={obj} />\n//         <button onClick={() => setObj({ count: obj.count })}>B button</button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default OptimizeTest;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}