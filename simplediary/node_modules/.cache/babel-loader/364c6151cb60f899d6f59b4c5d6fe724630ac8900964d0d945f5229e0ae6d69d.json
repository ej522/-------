{"ast":null,"code":"var _jsxFileName = \"/Users/eunji/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u11B8\\u110F\\u1173\\u1100\\u1175\\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173/simplediary/src/App.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useMemo, useReducer, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\n// import OptimizeTest2 from \"./OptimizeTest2\";\n// import OptimizeTest1 from \"./OptimizeTest1\";\n// import LifeCycle from \"./LifeCycle\";\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"이정환\",\n//     content: \"하이 1\",\n//     emotion: 5,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"홍길동\",\n//     content: \"하이 2\",\n//     emotion: 3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"아무개\",\n//     content: \"하이 3\",\n//     emotion: 1,\n//     created_date: new Date().getTime(),\n//   },\n// ];\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\":\n      {\n        return action.data;\n      }\n    case \"CREATE\":\n    case \"REMOVE\":\n    case \"EDIT\":\n    default:\n      return state;\n  }\n};\nfunction App() {\n  _s();\n  //전역적으로 data를 관리할 state\n  // const [data, setData] = useState([]);\n  const [data, dispatch] = useReducer(reducer, []);\n  const dataId = useRef(0);\n  const getData = async () => {\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/comments\").then(res => res.json());\n    const initData = res.slice(0, 20).map(it => {\n      //20개 데이터만 가져옴\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        //1~5 감정 점수를 랜덤으로 Math.random()은 소수점으로 나올 수 있기 때문에 Math.floor()를 사용해줌\n        created_date: new Date().getTime(),\n        id: dataId.current++\n      };\n    });\n    dispatch({\n      type: \"INIT\",\n      data: initData\n    }); //reducer는 액션 객체를 받는데 액션의 타입은 init이고 액션에 필요한 데이터는 initData\n    // setData(initData);\n  };\n  useEffect(() => {\n    getData();\n  }, []); //마운트 되는 시점에 api 호출\n\n  //일기 데이터를 추가할 수 있는 함수\n  //data를 업데이트 시키는 로직인 setData를 작성\n  //다이어리 에디터 안에 있는 값들을 모르기 때문에 파라미터로 받아옴\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: {\n        author,\n        content,\n        emotion,\n        id: dataId.current\n      }\n    });\n    const created_date = new Date().getTime();\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current\n    };\n    dataId.current += 1;\n    setData(data => [newItem, ...data]); //newItem을 제일 먼저 보여줄 거라서 newItem먼저\n  }, []);\n  const onRemove = useCallback(targetId => {\n    //setData함수에 전달되는 파라미터에는 최신 state가 전달되기 때문에 항상 최신 state를 이용하기 위해서는 함수형 업데이트의 인자 부분의 데이터를 사용해줘야함\n    //return 부분의 데이터를 사용해야 최신형 데이터를 사용할 수 있음\n    setData(data => data.filter(it => it.id !== targetId));\n  }, []);\n  const onEidt = useCallback((targetId, newContent) => {\n    setData(data => data.map(it => it.id === targetId ? {\n      ...it,\n      content: newContent\n    } : it));\n  }, []);\n\n  //현재 data state가 가지고 있는 좋은 기분, 나쁜 기분이 각각 몇 개가 있는지 카운팅하고 좋은 감정의 일기 비율이 어떻게 되는지 구하는 함수\n  //감정점수 1~2 기분 안좋음, 3~5 기분 좋음\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter(it => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = goodCount / data.length * 100;\n    return {\n      goodCount,\n      badCount,\n      goodRatio\n    };\n  }, [data.length]); //data.length가 변화할 때만 콜백 함수가 다시 수행하게 됨\n\n  const {\n    goodCount,\n    badCount,\n    goodRatio\n  } = getDiaryAnalysis;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(DiaryEditor, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uC804\\uCCB4 \\uC77C\\uAE30 : \", data.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uAC1C\\uC218 : \", goodCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uB098\\uC05C \\uC77C\\uAE30 \\uAC1C\\uC218 : \", badCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"\\uAE30\\uBD84 \\uC88B\\uC740 \\uC77C\\uAE30 \\uBE44\\uC728 : \", goodRatio]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DiaryList, {\n      onEidt: onEidt,\n      onRemove: onRemove,\n      diaryList: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"8pI+IJNvqew/MoUSMQd+r35/C1o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useMemo","useReducer","useRef","useState","DiaryEditor","DiaryList","jsxDEV","_jsxDEV","reducer","state","action","type","data","App","_s","dispatch","dataId","getData","res","fetch","then","json","initData","slice","map","it","author","email","content","body","emotion","Math","floor","random","created_date","Date","getTime","id","current","onCreate","newItem","setData","onRemove","targetId","filter","onEidt","newContent","getDiaryAnalysis","goodCount","length","badCount","goodRatio","className","children","fileName","_jsxFileName","lineNumber","columnNumber","diaryList","_c","$RefreshReg$"],"sources":["/Users/eunji/한입크기리액트/simplediary/src/App.js"],"sourcesContent":["import {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport \"./App.css\";\nimport DiaryEditor from \"./DiaryEditor\";\nimport DiaryList from \"./DiaryList\";\n// import OptimizeTest2 from \"./OptimizeTest2\";\n// import OptimizeTest1 from \"./OptimizeTest1\";\n// import LifeCycle from \"./LifeCycle\";\n\n// const dummyList = [\n//   {\n//     id: 1,\n//     author: \"이정환\",\n//     content: \"하이 1\",\n//     emotion: 5,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 2,\n//     author: \"홍길동\",\n//     content: \"하이 2\",\n//     emotion: 3,\n//     created_date: new Date().getTime(),\n//   },\n//   {\n//     id: 3,\n//     author: \"아무개\",\n//     content: \"하이 3\",\n//     emotion: 1,\n//     created_date: new Date().getTime(),\n//   },\n// ];\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\": {\n      return action.data;\n    }\n    case \"CREATE\":\n    case \"REMOVE\":\n    case \"EDIT\":\n    default:\n      return state;\n  }\n};\n\nfunction App() {\n  //전역적으로 data를 관리할 state\n  // const [data, setData] = useState([]);\n  const [data, dispatch] = useReducer(reducer, []);\n\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n\n    const initData = res.slice(0, 20).map((it) => {\n      //20개 데이터만 가져옴\n      return {\n        author: it.email,\n        content: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1, //1~5 감정 점수를 랜덤으로 Math.random()은 소수점으로 나올 수 있기 때문에 Math.floor()를 사용해줌\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n\n    dispatch({ type: \"INIT\", data: initData }); //reducer는 액션 객체를 받는데 액션의 타입은 init이고 액션에 필요한 데이터는 initData\n    // setData(initData);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []); //마운트 되는 시점에 api 호출\n\n  //일기 데이터를 추가할 수 있는 함수\n  //data를 업데이트 시키는 로직인 setData를 작성\n  //다이어리 에디터 안에 있는 값들을 모르기 때문에 파라미터로 받아옴\n  const onCreate = useCallback((author, content, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, content, emotion, id: dataId.current },\n    });\n    const created_date = new Date().getTime();\n\n    const newItem = {\n      author,\n      content,\n      emotion,\n      created_date,\n      id: dataId.current,\n    };\n    dataId.current += 1;\n    setData((data) => [newItem, ...data]); //newItem을 제일 먼저 보여줄 거라서 newItem먼저\n  }, []);\n\n  const onRemove = useCallback((targetId) => {\n    //setData함수에 전달되는 파라미터에는 최신 state가 전달되기 때문에 항상 최신 state를 이용하기 위해서는 함수형 업데이트의 인자 부분의 데이터를 사용해줘야함\n    //return 부분의 데이터를 사용해야 최신형 데이터를 사용할 수 있음\n    setData((data) => data.filter((it) => it.id !== targetId));\n  }, []);\n\n  const onEidt = useCallback((targetId, newContent) => {\n    setData((data) =>\n      data.map((it) =>\n        it.id === targetId ? { ...it, content: newContent } : it\n      )\n    );\n  }, []);\n\n  //현재 data state가 가지고 있는 좋은 기분, 나쁜 기분이 각각 몇 개가 있는지 카운팅하고 좋은 감정의 일기 비율이 어떻게 되는지 구하는 함수\n  //감정점수 1~2 기분 안좋음, 3~5 기분 좋음\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100;\n\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]); //data.length가 변화할 때만 콜백 함수가 다시 수행하게 됨\n\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis;\n\n  return (\n    <div className=\"App\">\n      {/* <LifeCycle /> */}\n      {/* <OptimizeTest1 /> */}\n      {/* <OptimizeTest2 /> */}\n      <DiaryEditor onCreate={onCreate} />\n      <div>전체 일기 : {data.length}</div>\n      <div>기분 좋은 일기 개수 : {goodCount}</div>\n      <div>기분 나쁜 일기 개수 : {badCount}</div>\n      <div>기분 좋은 일기 비율 : {goodRatio}</div>\n      <DiaryList onEidt={onEidt} onRemove={onRemove} diaryList={data} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}